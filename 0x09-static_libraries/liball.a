!<arch>
0-isupper.c/    0           0     0     644     233       `
#include "main.h"

/**
* _isupper - checks if character input is upper case
* @c: inputted character
* Return: 1 if positive and 0 if negative
*/

int _isupper(int c)
{

	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     318       `
#include "main.h"

/**
 * _memset - assign char b n number of char in string s
 * @s: string
 * @b: value to be assigned
 * @n: number of bytes to assign
 * Return: s with assigned values
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     397       `
#include "main.h"

/**
 * _strcat - concatenate 2 strings
 * @dest: destination and 1st string
 * @src: source and 2nd string
 * Return: the new string
 */

char *_strcat(char *dest, char *src)
{
	int len1, len2;

	len1 = 0;
	while (dest[len1] != '\0')
		len1++;
	len2 = 0;
	while (src[len2] != '\0')
	{

		dest[len1 + len2] = src[len2];
		len2++;
	}

	dest[len1 + len2] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     405       `
#include "main.h"

/**
 * _atoi - Converts a string to an integer.
 * @s: The string to be converted.
 *
 * Return: The integer value of the converted string.
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;

	} while (*s++);

	return (num * sign);
}

1-isdigit.c/    0           0     0     644     220       `
#include "main.h"

/**
 * _isdigit - checks if the input is a number between 1-9
 * @c: input
 * Return: 1 if true and 0 if false
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     335       `
#include "main.h"

/**
 * _memcpy - copy n number of bytes from src to dest
 * @dest: destination array
 * @src: src array
 * @n: number of bytes to be copied
 * Return: destination array
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     454       `
#include "main.h"

/**
 * _strncat - concatentate n number of words with the first string
 * @dest: destination string
 * @src: source string
 * @n: number of words to be concantented
 * Return: new concatenated string
 */

char *_strncat(char *dest, char *src, int n)
{
	int len1, len2;

	for (len1 = 0; dest[len1] != '\0'; len1++)
	{
	}
	for (len2 = 0; src[len2] != '\0' && n > 0; len2++, n--, len1++)
	{
		dest[len1] = src[len2];
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     375       `
#include "main.h"

/**
 * _strchr - check for the first occurence of a char
 * in a string and returns the pointerto it
 * @s: string to check
 * @c: char to check for
 * Return: pointer if char is present, null if not
 */

char *_strchr(char *s, char c)
{
	int i = 0;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		if (*(s + i) == c)
		{
			return (s + i);
		}
	}
	return (0);
}

2-strlen.c/     0           0     0     644     190       `
#include "main.h"

/**
 * _strlen - print the length of a string
 * @s: the string
 *
 * Return: 0
 */

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     409       `
#include "main.h"

/**
 * _strncpy - concatentate n number of words with the first string
 * @dest: destination string
 * @src: source string
 * @n: number of words to be concantented
 * Return: new concatenated word
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[i]  = src[i];
	}
	for (; n > i; i++)
	{
	dest[i] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     247       `
#include "main.h"

/**
 * _islower - check if the input character is lowercase or not
 * @c: character inputted
 * Return: 1 if it is a lowercase, 0 if not
 */
int _islower(int c)
{

	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);

}

3-puts.c/       0           0     0     644     185       `
#include "main.h"

/**
 * _puts - prints character
 * @str: string
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     344       `
#include "main.h"

/**
* _strcmp - Compares two strings.
* @s1: First string
* @s2: Second string
*
* Return: 0 if similar, positive number if s1 > s2, otherwise negative number
*/
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		return (s1[i] - s2[i]);
	}

	return (0);
}
3-strspn.c/     0           0     0     644     493       `
#include "main.h"

/**
 * _strspn - return the index where string s does not contain
 * any value in array accept
 * @s: searched string
 * @accept: value to search for
 * Return: index where value is absent
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j = 0, k;
	int check = 1;

	for (i = 0; s[i] != '\0' && check; i++)
	{
		check = 0;
		for (k = 0; accept[k]; k++)
		{
			if (s[i] == accept[k])
			{
				check = 1;
				j = j + 1;
				break;
			}
		}
	}
	return (j);
}

4-isalpha.c/    0           0     0     644     242       `
#include "main.h"
/**
 * _isalpha - check if an input is a letter, upper or lower
 * @c: inputted character
 * Return: 1 if it's a letter, 0 if it's not
 */
int _isalpha(int c)
{
	if (c >= 'A' && c <= 'z')
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     448       `
#include "main.h"

/**
 * _strpbrk - return the index where string s does not contain
 * any value in array accept
 * @s: searched string
 * @accept: value to search for
 * Return: index where value is absent
 */

char *_strpbrk(char *s, char *accept)
{
	int i, k;
	char *ans;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (k = 0; accept[k] != '\0'; k++)
		{
			if (s[i] == accept[k])
			{
				ans = &s[i];
				return (ans);
			}
		}
	}
	return (0);
}
5-strstr.c/     0           0     0     644     316       `
#include "main.h"

char *_strstr(char *haystack, char *needle)
{
	int i, j, pos;

	for (i = 0; *(haystack + i) != '\0'; i++)
	{
		if (haystack[i] == needle[0])
		{
			pos = i;
		}
	}

	for (; *(haystack + pos); pos++, j++)
	{
		if (haystack[pos] != needle[j])
		{
			return(0);
		}
	}
	return ((haystack + pos));
} 
6-abs.c/        0           0     0     644     202       `
#include "main.h"

/**
 * _abs - print absolute value of int
 * @x: integer input
 * Return: 0
 */
int _abs(int x)
{
	if (x >= 0)
	{
		return (x);
	}
	else
	{
		x *= -1;
		return (x);
	}
return (0);
}

9-strcpy.c/     0           0     0     644     434       `
#include "main.h"

/**
 * _strcpy - Copies a string pointed to by @src, including the
 *           terminating null byte, to a buffer pointed to by @dest.
 * @dest: A buffer to copy the string to.
 * @src: The source string to copy.
 *
 * Return: A pointer to the destination string @dest.
 */
char *_strcpy(char *dest, char *src)
{
	int index = 0;

	while (src[index])
	{
		dest[index] = src[index];
		index++;
	}

	return (dest);
}
_putchar.c/     0           0     0     644     281       `
#include <unistd.h>

/**
 *  * _putchar - writes the character c to stdout
 *   * @c: The character to print
 *    *
 *     * Return: On success 1.
 *      * On error, -1 is returned, and errno is set appropriately.
 *       */
int _putchar(char c)
{
		return (write(1, &c, 1));
}

